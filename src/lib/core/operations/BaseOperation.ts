import type { OperationWithPseudocode, Operation } from '@/types/operations';
import type { DataStructureState, PseudocodeLine } from '@/types/data-structure';

/**
 * Abstract base class for operations with pseudocode and highlight mapping.
 */
export abstract class BaseOperation implements OperationWithPseudocode {
  id: string;
  type: string;
  params: Record<string, any>;
  timestamp: number;
  description: string;
  abstract pseudocode: PseudocodeLine[];

  constructor(type: string, params: Record<string, any>, description: string) {
    this.id = crypto.randomUUID();
    this.type = type;
    this.params = params;
    this.timestamp = Date.now();
    this.description = description;
  }

  /**
   * Generate all states for this operation given the initial data structure state.
   */
  abstract generateStates(initialState: DataStructureState): DataStructureState[];

  /**
   * Map the current step to the pseudocode lines to highlight.
   * @param states All states generated by this operation
   * @param stepIndex Current step index
   * @returns Array of line numbers to highlight
   */
  abstract generateHighlights(states: DataStructureState[], stepIndex: number): number[];

  /**
   * Get operation info for history controller, etc.
   */
  getOperationInfo(): Operation {
    return {
      id: this.id,
      type: this.type,
      params: this.params,
      timestamp: this.timestamp,
      description: this.description,
    };
  }
}
